import chalk from 'chalk';
import { writeFile } from '../utils.js';


export const saveDataForGo = {
    save: async (destination, completeData) => {
        /** Configuration **/
        let goData = saveDataForGo.build('Config', completeData.config);
        await writeFile(destination + 'config.go', goData );

        /** Main Data **/
        let langMap = {},
            dataMap = [],
            keyCap;
        for (const [key, data] of Object.entries(completeData.data)) {
            keyCap = key.charAt(0).toUpperCase() + key.slice(1);
            dataMap.push(keyCap);
            goData = saveDataForGo.build(keyCap, data);
            await writeFile(destination + key + '.go', goData );
            console.log(chalk.cyan('         - Main data for `go` app for `' + key + '` has been written'));

            /** Translations Data **/
            for (const [lang, dataTrans] of Object.entries(completeData.translations[key])) {
                langMap[lang] = lang.charAt(0).toUpperCase() + lang.slice(1);

                goData = saveDataForGo.build(keyCap, dataTrans, langMap[lang]);
                await writeFile(destination + completeData.TranslationDir + lang + '/' + key + '.go', goData );
                console.log(
                    chalk.cyan(
                        '         - Translations language data `' + lang +'` for `go` app for `' + key +
                        '` has been written'
                    )
                );
            }

            goData = saveDataForGo.buildMap(langMap, dataMap);
            await writeFile(destination + completeData.TranslationDir + 'Translations.go', goData );
            console.log(chalk.cyan('         - Translations map for `go` app has been written'));
        }
        return;
    },

    disclaimer: () => {
        return `/**
 * This file has been automatically generated by the \`data-geoCodes\` application.
 * Any modifications you make will be overwritten during upgrades.
 * To avoid this, you can save the data directory in another location and launch the app specifying the new directory.
 * If you want to contribute to the development of the data, please follow these steps:
 * - Install Node.js on your system (you can use the instructions at https://nodejs.org/en/download/package-manager).
 * - Clone the repository from GitHub \`https://github.com/alibe1971/data-geoCodes\`.
 * - Modify the JSON files in the directory.
 * - Run the \`node build\` script from your terminal.
 * - The built files will be located inside the directory:
 *   - \`Data/built/node\`
 * - Submit a pull request to publish your changes.
 * - You can also clone the GoLang application, integrate the built data, and submit two separate pull requests:
 *   - One for the data modifications.
 *   - Another for integrating the modified data into the specific app.
 * For further detailed information, please refer to the documentation.
 */
`;
    },

    build: (name, data, Translation = null) => {
        let packageName = 'geoCodes';
        if (Translation) {
            packageName = 'Translations' + Translation;
        }

        let buildData = saveDataForGo.disclaimer();
        buildData += '\npackage ' + packageName + '\n';

        buildData += '\nconst ' + name + ' = `' +
            JSON.stringify(data, null, 4) + '`';

        return buildData;
    },

    buildMap: (langMap, dataMap) => {
        let importPackage = '',
            mapCall = {};
        for (const key of dataMap) {
            mapCall[key] = '';
        }
        for (const [lang, Lang] of Object.entries(langMap)) {
            importPackage += `\n\t"github.com/alibe1971/go-geoCodes/geoCodes/Data/Translations/${lang}"`;
            for (const key of dataMap) {
                mapCall[key] += `\n\t"${lang}": Translations${Lang}.${key},`;
            }
        }
        let buildData = saveDataForGo.disclaimer();
        buildData += '\npackage TranslationsData\n\n';
        buildData += 'import (' + importPackage + '\n)\n\n';
        for (const key of dataMap) {
            buildData += 'var Translations' + key + ' = map[string]string{' + mapCall[key] + '\n}\n\n';
        }

        return buildData;
    },
};


